#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –¥–ª—è workflow run_bot.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ workflow, –º–∏–Ω—É—è main.py.
"""
import os
import sys
import signal
import logging
import json
import random
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(sig, frame):
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º...')
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import (
        Application, CommandHandler, ContextTypes,
        CallbackQueryHandler, CallbackContext
    )
except ImportError:
    logger.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot!")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ–º–∞—Ö –∏ —Ñ–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
try:
    from meme_data import MEMES
    from content_filter import is_suitable_meme, BLOCKED_URL_PATTERNS
except ImportError as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏: {e}")
    sys.exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
try:
    if os.path.exists('bot_state.json'):
        with open('bot_state.json', 'r') as f:
            loaded_data = json.load(f)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ —á–∏—Å–ª–æ–≤—ã–µ –∏ "sent_memes" –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
            for user_id_str, user_data in loaded_data.items():
                user_id = int(user_id_str)
                if "sent_memes" in user_data and isinstance(user_data["sent_memes"], list):
                    user_data["sent_memes"] = set(user_data["sent_memes"])
                user_states[user_id] = user_data
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {len(user_states)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
except Exception as e:
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: {e}")

# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–º—ã (–±–µ–∑ —Ä–µ–∫–ª–∞–º—ã, —Å–ø–æ—Ä—Ç–∞ –∏ —Ç.–¥.)
logger.info("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ–º–æ–≤...")
filtered_memes = {k: v for k, v in MEMES.items() if is_suitable_meme(v)}

if not filtered_memes:
    logger.warning("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–º–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –Ω–∞–±–æ—Ä")
    filtered_memes = MEMES

logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ {len(filtered_memes)} –º–µ–º–æ–≤ –∏–∑ {len(MEMES)} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = update.effective_user.id
    username = update.effective_user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in user_states:
        user_states[user_id] = {
            "ratings": {},
            "sent_memes": set(),
            "current_meme_id": None,
        }
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {username}! –Ø –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–µ–º–æ–≤.\n"
        "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –º–µ–º—ã, –∞ —Ç—ã –º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∏—Ö üëç –∏–ª–∏ üëé\n"
        "–°–µ–π—á–∞—Å —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –ø–µ—Ä–≤—ã–π –º–µ–º:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –º–µ–º
    await send_random_meme(update, context)

async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in user_states:
        user_states[user_id] = {
            "ratings": {},
            "sent_memes": set(),
            "current_meme_id": None,
        }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sent_memes = user_states[user_id].get("sent_memes", set())
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—Å–µ—Ö –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤
    meme_ids = list(filtered_memes.keys())
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∏–¥–µ–ª 70% –≤—Å–µ—Ö –º–µ–º–æ–≤, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Å—Ç–∏—á–Ω–æ
    if len(sent_memes) >= int(len(meme_ids) * 0.7):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤–∏–¥–µ–ª –º–Ω–æ–≥–æ –º–µ–º–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —á–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ–º–æ–≤ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –∏ –∏–∑–±–µ–≥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        sent_memes_list = list(sent_memes)
        sent_memes = set(sent_memes_list[-5:])
        user_states[user_id]["sent_memes"] = sent_memes
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–∞–≤–Ω–æ
    available_memes = [m_id for m_id in meme_ids if m_id not in sent_memes]
    
    # –ï—Å–ª–∏ –≤—Å–µ –º–µ–º—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –≤—Å–µ—Ö
    if not available_memes:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤–∏–¥–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–º—ã, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π")
        meme_id = random.choice(meme_ids)
    else:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –∏–∑ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
        meme_id = random.choice(available_memes)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–º –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤
    meme = filtered_memes.get(meme_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –º–µ–º–µ
    user_states[user_id]["current_meme_id"] = meme_id
    user_states[user_id].setdefault("sent_memes", set()).add(meme_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("üëç", callback_data="rating:1"),
            InlineKeyboardButton("üëé", callback_data="rating:-1"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "image_url" in meme and meme["image_url"]:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
            await update.effective_chat.send_photo(
                photo=meme["image_url"],
                caption=meme.get("text", ""),
                reply_markup=reply_markup
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º {meme_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.effective_chat.send_message(
                text=f"{meme.get('text', '–ú–µ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞')}",
                reply_markup=reply_markup
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–º {meme_id} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç
        await update.effective_chat.send_message(
            text=meme.get("text", "–ú–µ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"),
            reply_markup=reply_markup
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–º {meme_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    callback_data = query.data
    
    if callback_data.startswith("rating:"):
        rating = int(callback_data.split(":")[1])
        current_meme_id = user_states[user_id].get("current_meme_id")
        
        if current_meme_id:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
            user_states[user_id].setdefault("ratings", {})[current_meme_id] = rating
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª –º–µ–º {current_meme_id} —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {rating}")
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
            await query.edit_message_reply_markup(reply_markup=None)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON
                json_data = {}
                for u_id, u_data in user_states.items():
                    json_data[str(u_id)] = u_data.copy()
                    if "sent_memes" in json_data[str(u_id)] and isinstance(json_data[str(u_id)]["sent_memes"], set):
                        json_data[str(u_id)]["sent_memes"] = list(json_data[str(u_id)]["sent_memes"])
                
                with open('bot_state.json', 'w') as f:
                    json.dump(json_data, f)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
            if rating > 0:
                await update.effective_chat.send_message("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É! –í–æ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º:")
            else:
                await update.effective_chat.send_message("üëé –ü–æ–Ω—è–ª, —ç—Ç–æ—Ç –º–µ–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è. –í–æ—Ç —Å–ª–µ–¥—É—é—â–∏–π:")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º
            await send_random_meme(update, context)
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –º–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.effective_chat.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await update.message.reply_text(
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–µ–º–æ–≤. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –º–µ–º\n"
        "/next - –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º –±–µ–∑ –æ—Ü–µ–Ω–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–º–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ –∫–Ω–æ–ø–∫–∞–º–∏ üëç –∏–ª–∏ üëé"
    )

async def next_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /next –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–º–∞."""
    await update.message.reply_text("–í–æ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º:")
    await send_random_meme(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("next", next_command))
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        application.run_polling(poll_interval=1.0, timeout=30)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    time.sleep(1)
    logger.info("=== –ü–†–Ø–ú–û–ô –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê ===")
    main()