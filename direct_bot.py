#!/usr/bin/env python3
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤.
–≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç workflow.
"""
import os
import sys
import logging
import traceback
import signal
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    stream=sys.stdout)

logger = logging.getLogger(__name__)

def signal_handler(sig, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TELEGRAM_BOT_TOKEN
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –±–æ—Ç–∞
    try:
        from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
        from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–º–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            from meme_data import MEMES, is_suitable_meme
        except ImportError:
            # –ï—Å–ª–∏ –º–æ–¥—É–ª—å meme_data.py –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.warning("–ú–æ–¥—É–ª—å meme_data.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            MEMES = {
                "test_meme_1": {
                    "title": "–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–º 1",
                    "text": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"
                },
                "test_meme_2": {
                    "title": "–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–º 2",
                    "text": "–ï—â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"
                }
            }
            
            def is_suitable_meme(meme):
                return True
        
        # –ì–æ—Ç–æ–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_states = {}
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
            if update.effective_user is None:
                logger.error("effective_user is None")
                return
                
            user_id = update.effective_user.id
            username = update.effective_user.username or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ú–µ–º–æ–ª—é–±! –Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±–µ —Å–º–µ—à–Ω—ã–µ –º–µ–º—ã, –∞ —Ç—ã –∏—Ö –æ—Ü–µ–Ω–∏–≤–∞–π. –í–æ—Ç –ø–µ—Ä–≤—ã–π –º–µ–º:"
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            if user_id not in user_states:
                user_states[user_id] = {
                    "seen_memes": set(),
                    "ratings": {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –º–µ–º–æ–≤
                }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –º–µ–º
            await send_random_meme(update, context)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞
        async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
            if update.effective_user is None or update.effective_chat is None:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —á–∞—Ç–µ!")
                return
                
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º
            meme_ids = list(MEMES.keys())
            if not meme_ids:
                logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–º–æ–≤!")
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            meme_id = random.choice(meme_ids)
            meme = MEMES.get(meme_id, {"text": "–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–º", "title": "–¢–µ—Å—Ç"})
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º {meme_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ì–æ—Ç–æ–≤–∏–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–µ–º–∞
            keyboard = [
                [
                    InlineKeyboardButton("üëç", callback_data=f"like_{meme_id}"),
                    InlineKeyboardButton("üëé", callback_data=f"dislike_{meme_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º
            meme_text = meme.get("text", "–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–º")
            
            await context.bot.send_message(
                chat_id=chat_id,
                text=meme_text,
                reply_markup=reply_markup
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤
            if user_id in user_states and "seen_memes" in user_states[user_id]:
                user_states[user_id]["seen_memes"].add(meme_id)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
            if update.callback_query is None:
                logger.error("callback_query is None")
                return
                
            query = update.callback_query
            await query.answer()
            
            if update.effective_user is None:
                logger.error("effective_user is None")
                return
                
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
            data = query.data
            if data is None or "_" not in data:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {data}")
                return
                
            action, meme_id = data.split("_", 1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_states:
                if "ratings" not in user_states[user_id]:
                    user_states[user_id]["ratings"] = {}
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É: 1 –¥–ª—è –ª–∞–π–∫–∞, -1 –¥–ª—è –¥–∏–∑–ª–∞–π–∫–∞
                user_states[user_id]["ratings"][meme_id] = 1 if action == "like" else -1
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Å—Ç–∞–≤–∏–ª {'–ª–∞–π–∫' if action == 'like' else '–¥–∏–∑–ª–∞–π–∫'} –¥–ª—è –º–µ–º–∞ {meme_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º
            await send_random_meme(update, context)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        application.run_polling()
        
    except ImportError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
        logger.error(traceback.format_exc())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    main()