
#!/usr/bin/env python
import os
import sys
import logging
import random

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

from vk_utils import VKMemesFetcher

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∏—Ö Telegram ID)
ADMIN_IDS = [
    "imksm_d",  # –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω
    "@imksm_d"  # –í—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω (—Å @ –µ—Å–ª–∏ —ç—Ç–æ username)
]

def is_admin(user_id_or_username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(user_id_or_username) in ADMIN_IDS or f"@{user_id_or_username}" in ADMIN_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                   stream=sys.stdout)

logger = logging.getLogger(__name__)

# VK –≥—Ä—É–ø–ø—ã —Å –º–µ–º–∞–º–∏ (ID –≥—Ä—É–ø–ø)
MEME_GROUPS = [
    169229890,  # MDK
    460389,  # –°–º–µ—à–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    217424576  # –ù–æ–≤—ã–π –ø–∞–±–ª–∏–∫
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_fetcher = VKMemesFetcher(os.environ.get("VK_TOKEN"))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_states = {}

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user = update.effective_user
    if not is_admin(user.username) and not is_admin(user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    await update.message.reply_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: " + ", ".join(ADMIN_IDS)
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Anonymous"
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –ø–æ–≤–µ—Å–µ–ª–∏—Ç—å—Å—è? \n–ñ–º–∏ /start –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –º–µ–º"
    )
    
    await send_random_meme(update, context)

async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –∏–∑ –í–ö"""
    image_url, caption = vk_fetcher.get_random_meme(MEME_GROUPS)
    
    if not image_url:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    keyboard = [[
        InlineKeyboardButton("üëç", callback_data="like"),
        InlineKeyboardButton("üëé", callback_data="dislike"),
        InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data="next")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=image_url,
        caption=caption[:1024] if caption else None,
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "next":
        await send_random_meme(update, context)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞/–¥–∏–∑–ª–∞–π–∫–∞
        reaction = "üëç" if query.data == "like" else "üëé"
        
        if query.data == "dislike":
            image_url = None
            # –ü–æ–ª—É—á–∞–µ–º URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if update.callback_query.message.photo:
                image_url = update.callback_query.message.photo[-1].file_id
            
            if image_url:
                if image_url not in vk_fetcher.meme_dislikes:
                    vk_fetcher.meme_dislikes[image_url] = 0
                vk_fetcher.meme_dislikes[image_url] += 1
                
                # –ï—Å–ª–∏ –º–µ–º –Ω–∞–±—Ä–∞–ª –º–Ω–æ–≥–æ –¥–∏–∑–ª–∞–π–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                if vk_fetcher.meme_dislikes[image_url] >= vk_fetcher.max_dislikes:
                    vk_fetcher.sent_memes.add(image_url)
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {reaction}! –í–æ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º:"
        )
        await send_random_meme(update, context)

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return False

    try:
        application = Application.builder().token(token).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(CallbackQueryHandler(button_callback))

        logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    run_bot()
