#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è workflow run_bot.
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏.
"""
import logging
import os
import signal
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

from meme_data import MEMES
from content_filter import is_suitable_meme

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    stream=sys.stdout)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤
filtered_memes = None

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞...")
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        sys.exit(1)
    
    logger.info("=== –ó–ê–ü–£–°–ö TELEGRAM-–ë–û–¢–ê –î–õ–Ø WORKFLOW ===")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∫—ç—à –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ–º–æ–≤
    global filtered_memes
    if filtered_memes is None:
        logger.info("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ–º–æ–≤...")
        filtered_memes = {}
        filtered_count = 0
        
        for meme_id, meme_data in MEMES.items():
            if is_suitable_meme(meme_data):
                filtered_memes[meme_id] = meme_data
            else:
                filtered_count += 1
        
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ {len(filtered_memes)} –º–µ–º–æ–≤ –∏–∑ {len(MEMES)} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")
    application = Application.builder().token(token).build()
    
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        user = update.effective_user
        user_id = user.id
        username = user.username
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if user_id not in user_states:
            user_states[user_id] = {
                "username": username,
                "current_meme": None,
                "viewed_memes": [],
                "ratings": {}
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –º–µ–º
        await send_random_meme(update, context)
    
    async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        import random
        
        user = update.effective_user
        user_id = user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª
        if user_id in user_states:
            viewed_memes = user_states[user_id].get("viewed_memes", [])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ filtered_memes –Ω–µ None
            if filtered_memes is None:
                logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: filtered_memes —Ä–∞–≤–µ–Ω None")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
                
            available_memes = [meme_id for meme_id in filtered_memes if meme_id not in viewed_memes]
            
            # –ï—Å–ª–∏ –≤—Å–µ –º–µ–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
            if not available_memes:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –º–µ–º—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é")
                user_states[user_id]["viewed_memes"] = []
                available_memes = list(filtered_memes.keys())
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º
            meme_id = random.choice(available_memes)
            meme = filtered_memes[meme_id]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("üëç", callback_data=f"rate:{meme_id}:1"),
                    InlineKeyboardButton("üëé", callback_data=f"rate:{meme_id}:-1")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            text = meme.get("text", "")
            image_url = meme.get("image_url", "")
            
            if image_url:
                message = await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=image_url,
                    caption=text,
                    reply_markup=reply_markup
                )
            else:
                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=text,
                    reply_markup=reply_markup
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states[user_id]["current_meme"] = meme_id
            user_states[user_id]["viewed_memes"].append(meme_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ–º–µ
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–º {meme_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
    
    async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data.split(":")
        
        if len(data) == 3 and data[0] == "rate":
            meme_id = data[1]
            rating = int(data[2])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
            if user_id in user_states:
                if "ratings" not in user_states[user_id]:
                    user_states[user_id]["ratings"] = {}
                
                user_states[user_id]["ratings"][meme_id] = rating
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª –º–µ–º {meme_id}: {rating}")
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏
                try:
                    meme = filtered_memes.get(meme_id, MEMES.get(meme_id))
                    text = meme.get("text", "") if meme else ""
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
                    rating_text = "üëç –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —ç—Ç–æ—Ç –º–µ–º!" if rating == 1 else "üëé –í–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —ç—Ç–æ—Ç –º–µ–º."
                    response_text = f"{rating_text}\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º..."
                    
                    if query.message.photo:
                        await query.edit_message_caption(
                            caption=f"{text}\n\n{response_text}",
                            reply_markup=None
                        )
                    else:
                        await query.edit_message_text(
                            text=f"{text}\n\n{response_text}",
                            reply_markup=None
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º
                await send_random_meme(update, context)
    
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–º–æ–≤! üëã\n\n"
                "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–º–æ–≤\n"
                "/next - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ–º\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ üëç –∏–ª–∏ üëé, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –º–µ–º, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Å–ª–µ–¥—É—é—â–∏–π."
            )
        )
    
    async def next_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /next –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–º–∞."""
        user_id = update.effective_user.id
        
        if user_id in user_states and user_states[user_id].get("current_meme"):
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ–º..."
            )
            await send_random_meme(update, context)
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–º–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä."
            )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("next", next_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling()

if __name__ == "__main__":
    main()