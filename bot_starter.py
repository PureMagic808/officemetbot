#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Telegram-–±–æ—Ç–∞.
–≠—Ç–æ—Ç —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ workflow run_bot.
"""
import os
import sys
import signal
import logging
import requests
from typing import Dict, Any, Set
import json
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(sig, frame):
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º...')
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import (
        Application, CommandHandler, ContextTypes,
        CallbackQueryHandler, CallbackContext
    )
except ImportError:
    logger.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot!")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ–º–∞—Ö –∏ —Ñ–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
try:
    from meme_data import MEMES
    from content_filter import is_suitable_meme, BLOCKED_URL_PATTERNS
except ImportError:
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏!")
    MEMES = {}
    BLOCKED_URL_PATTERNS = ["—Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è", "—Ñ–∏—Ç–Ω–µ—Å", "nail"]
    def is_suitable_meme(meme):
        return True

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    
    if not BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        sys.exit(1)
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –º–µ–º–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∏ —Å–ø–æ—Ä—Ç)
        filtered_memes = {k: v for k, v in MEMES.items() if is_suitable_meme(v)}
        
        if not filtered_memes:
            logger.warning("–°–ø–∏—Å–æ–∫ –º–µ–º–æ–≤ –ø—É—Å—Ç –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ meme_data.py")
            filtered_memes = MEMES
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(filtered_memes)} –º–µ–º–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤
        async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
            user_id = update.effective_user.id
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if user_id not in user_states:
                user_states[user_id] = {
                    "ratings": {},
                    "sent_memes": set(),
                    "current_meme_id": None,
                }
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–µ–º–æ–≤.\n"
                "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –º–µ–º—ã, –∞ —Ç—ã –º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∏—Ö üëç –∏–ª–∏ üëé\n"
                "–°–µ–π—á–∞—Å —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –ø–µ—Ä–≤—ã–π –º–µ–º:"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –º–µ–º
            await send_random_meme(update, context)
        
        async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
            user_id = update.effective_user.id
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –º–µ–º–æ–≤, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            meme_ids = list(filtered_memes.keys())
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –º–µ–º—ã
            if not meme_ids:
                logger.warning("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ–º–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä")
                meme_ids = list(MEMES.keys())
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_states:
                user_states[user_id] = {
                    "ratings": {},
                    "sent_memes": set(),
                    "current_meme_id": None,
                }
            
            sent_memes = user_states[user_id].get("sent_memes", set())
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∏–¥–µ–ª 70% –≤—Å–µ—Ö –º–µ–º–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Ä–æ—Ç–∞—Ü–∏—é –º–µ–º–æ–≤ –∏ –∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            if len(sent_memes) >= int(len(meme_ids) * 0.7):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤–∏–¥–µ–ª –º–Ω–æ–≥–æ –º–µ–º–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —á–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏")
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ–º–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥
                if len(sent_memes) > 5:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ set
                    sent_memes_list = list(sent_memes)
                    sent_memes = set(sent_memes_list[-5:])
                    user_states[user_id]["sent_memes"] = sent_memes
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–∞–≤–Ω–æ
            available_memes = [m_id for m_id in meme_ids if m_id not in sent_memes]
            
            # –ï—Å–ª–∏ –≤—Å–µ –º–µ–º—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ),
            # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –≤—Å–µ—Ö
            if not available_memes:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤–∏–¥–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–º—ã –Ω–µ–¥–∞–≤–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π")
                meme_id = random.choice(meme_ids)
            else:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
                meme_id = random.choice(available_memes)
            
            # –ë–µ—Ä–µ–º —Å–∞–º –º–µ–º –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            meme = filtered_memes.get(meme_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–µ–º –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω
            if not meme:
                logger.warning(f"–ú–µ–º —Å ID {meme_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –±–µ—Ä–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞")
                meme = MEMES.get(meme_id, {"text": "–£–ø—Å, —ç—Ç–æ—Ç –º–µ–º –ø–æ—Ç–µ—Ä—è–ª—Å—è!"})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states[user_id]["current_meme_id"] = meme_id
            user_states[user_id].setdefault("sent_memes", set()).add(meme_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("üëç", callback_data="rating:1"),
                    InlineKeyboardButton("üëé", callback_data="rating:-1"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if "image_url" in meme and meme["image_url"]:
                try:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL –Ω–∞ —Ä–µ–∫–ª–∞–º—É –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                    image_url = meme["image_url"]
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –º–æ–¥—É–ª—è content_filter
                    if any(term in image_url.lower() for term in BLOCKED_URL_PATTERNS):
                        # –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        await update.effective_chat.send_message(
                            text=meme.get("text", "–ú–µ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"),
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–º {meme_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (URL –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω)")
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
                        await update.effective_chat.send_photo(
                            photo=image_url,
                            caption=meme.get("text", ""),
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π {meme_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–º–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await update.effective_chat.send_message(
                        text=f"{meme.get('text', '–ú–µ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞')}",
                        reply_markup=reply_markup
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–º {meme_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏)")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await update.effective_chat.send_message(
                    text=meme.get("text", "–ú–µ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"),
                    reply_markup=reply_markup
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–º {meme_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
            query = update.callback_query
            await query.answer()
            
            user_id = update.effective_user.id
            callback_data = query.data
            
            if callback_data.startswith("rating:"):
                rating = int(callback_data.split(":")[1])
                current_meme_id = user_states[user_id].get("current_meme_id")
                
                if current_meme_id:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_states[user_id].setdefault("ratings", {})[current_meme_id] = rating
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª –º–µ–º {current_meme_id} —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {rating}")
                    
                    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ü–µ–Ω–∫—É –∏ —Å—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
                    await query.edit_message_reply_markup(reply_markup=None)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
                    try:
                        import json
                        with open('bot_state.json', 'w') as f:
                            json.dump(user_states, f)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: {e}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
                    if rating > 0:
                        await update.effective_chat.send_message("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É! –í–æ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º:")
                    else:
                        await update.effective_chat.send_message("üëé –ü–æ–Ω—è–ª, —ç—Ç–æ—Ç –º–µ–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è. –í–æ—Ç —Å–ª–µ–¥—É—é—â–∏–π:")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º
                    await send_random_meme(update, context)
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –º–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    await update.effective_chat.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        application.run_polling(poll_interval=1.0, timeout=30)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()