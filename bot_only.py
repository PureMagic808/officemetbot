#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¢–û–õ–¨–ö–û –±–æ—Ç–∞ –±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ workflow run_bot.
"""
import os
import sys
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    stream=sys.stdout)

logger = logging.getLogger(__name__)
logger.info("–ó–∞–ø—É—Å–∫ –¢–û–õ–¨–ö–û Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ bot_only.py...")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–º–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
from meme_data import MEMES, is_suitable_meme, MEME_SOURCES

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
token = os.environ.get("TELEGRAM_BOT_TOKEN")
if not token:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN —Å —Ç–æ–∫–µ–Ω–æ–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞")
    sys.exit(1)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Anonymous"
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ú–µ–º–æ–ª—é–±! –Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±–µ —Å–º–µ—à–Ω—ã–µ –º–µ–º—ã, –∞ —Ç—ã –∏—Ö –æ—Ü–µ–Ω–∏–≤–∞–π. –í–æ—Ç –ø–µ—Ä–≤—ã–π –º–µ–º:"
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    if user_id not in user_states:
        user_states[user_id] = {
            "seen_memes": set(),
            "ratings": {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –º–µ–º–æ–≤
        }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –º–µ–º
    await send_random_meme(update, context)

async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = update.effective_user.id
    user_data = user_states.get(user_id, {"seen_memes": set(), "ratings": {}})
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª
    unseen_memes = [meme_id for meme_id in MEMES.keys() if meme_id not in user_data["seen_memes"]]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∏–¥–µ–ª –≤—Å–µ –º–µ–º—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if not unseen_memes:
        user_data["seen_memes"] = set()
        unseen_memes = list(MEMES.keys())
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –º–µ–º—ã! –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
        )
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º, —É–±–µ–¥–∏–≤—à–∏—Å—å, —á—Ç–æ –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç (–Ω–µ —Ä–µ–∫–ª–∞–º–∞, –Ω–µ —Å–ø–æ—Ä—Ç)
    suitable_meme_found = False
    attempts = 0
    max_attempts = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–º
    
    while not suitable_meme_found and attempts < max_attempts and unseen_memes:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º
        meme_id = random.choice(unseen_memes)
        meme = MEMES[meme_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º (–Ω–µ —Ä–µ–∫–ª–∞–º–∞, –Ω–µ —Å–ø–æ—Ä—Ç –∏ —Ç.–¥.)
        if is_suitable_meme(meme):
            suitable_meme_found = True
            logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–º ID: {meme_id}")
        else:
            # –ï—Å–ª–∏ –º–µ–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –∏—Å–∫–ª—é—á–∞–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            unseen_memes.remove(meme_id)
            user_data["seen_memes"].add(meme_id)  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            logger.info(f"–ú–µ–º ID {meme_id} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –∫–∞–∫ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π (—Ä–µ–∫–ª–∞–º–∞/—Å–ø–æ—Ä—Ç)")
            attempts += 1
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–º –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫, –±–µ—Ä–µ–º –ª—é–±–æ–π
    if not suitable_meme_found:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π")
        if unseen_memes:
            meme_id = random.choice(unseen_memes)
            meme = MEMES[meme_id]
        else:
            # –ï—Å–ª–∏ –≤—Å–µ –º–µ–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –±–µ—Ä–µ–º –ª—é–±–æ–π
            meme_id = random.choice(list(MEMES.keys()))
            meme = MEMES[meme_id]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    user_data["seen_memes"].add(meme_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("üëç", callback_data=f"like_{meme_id}"),
            InlineKeyboardButton("üëé", callback_data=f"dislike_{meme_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –º–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (—Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    if "image_url" in meme:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=meme["image_url"],
            caption=meme.get("caption", ""),
            reply_markup=reply_markup
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=meme["text"],
            reply_markup=reply_markup
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
    data = query.data
    action, meme_id = data.split("_", 1)
    meme_id = int(meme_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        if action == "like":
            user_states[user_id]["ratings"][meme_id] = 1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –º–µ–º—É {meme_id}")
        else:
            user_states[user_id]["ratings"][meme_id] = -1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫ –º–µ–º—É {meme_id}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º
    await send_random_meme(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ bot_only.py...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        application.run_polling()
        return True
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    main()